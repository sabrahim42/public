# -*- coding: utf-8 -*-
"""encontrar_y_geolozalizar_direcciones.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dS_MdgDRx7-BzKpf9Mh72bOZ2ariRvh
"""

import requests
from requests.adapters import HTTPAdapter, Retry

# Función para normalizar una dirección usando la API
def normalizar_direccion(direccion):
    s = requests.Session()
    retries = Retry(total=5, backoff_factor=1)
    # Montar el adaptador para HTTPS
    s.mount('https://', HTTPAdapter(max_retries=retries))

    url = "https://servicios.usig.buenosaires.gob.ar/normalizar/"
    payload = {"direccion": direccion}
    try:
        response = s.get(url, params=payload)
    except requests.exceptions.RequestException as e:
        print(f'{e} - {direccion}')
        return [{}]
    if response.status_code == 200:
        return response.json()
    else:
        return [{}]

# Commented out IPython magic to ensure Python compatibility.
# %pip install usig_normalizador_amba

import pandas as pd
import re
from usig_normalizador_amba import NormalizadorAMBA
from usig_normalizador_amba.Errors import *
from urllib.error import URLError
import time

def buscarDireccionConNormalizador(text:str,nd:NormalizadorAMBA):
    try:
        res = nd.buscarDireccion(text)
    except (ErrorTextoSinDireccion, ErrorCalleInexistente, ErrorCruceInexistente, ErrorCalleInexistenteAEsaAltura):
        return None
    return res

def getDireccionNormalizador(res, limite_res=2):
    direcciones = []
    for i in range(len(res)):
        for j in range(len(res[i])):
            direcciones.extend(res[i][j].get('direcciones', []))
    if 0 < len(direcciones) <= limite_res:
        return direcciones[0]
    else:
        return None

def agregarInformacionDireccion(data:pd.DataFrame,columna:str,nd:NormalizadorAMBA,limite_res=2):
  new_data = data.copy(deep=True)

  new_data['CALLE'] = None
  new_data['ALTURA'] = None
  new_data['CALLE_CRUCE'] = None
  new_data['DIRECCION'] = None

  for index, row in new_data.iterrows():
      texto = row[columna]
      res =  buscarDireccionConNormalizador(texto,nd)
      if res is not None:
        direccion = getDireccionNormalizador(res,limite_res)
        if direccion is not None:
          new_data.loc[index, "DIRECCION"] = direccion.toString()
          new_data.loc[index, "CALLE"] = direccion.calle.nombre
          new_data.loc[index, "ALTURA"] = direccion.altura
          if direccion.cruce is not None:
            new_data.loc[index, "CALLE_CRUCE"] = direccion.cruce.nombre

  return new_data

def obtenerCoordenadasNormalizador(direccion:str):
    """Obtiene las coordenadas de una dirección utilizando una función de normalización.

    Args:
        direccion (str): La dirección a normalizar.

    Returns:
        dict: Un diccionario con coordenadas 'x' e 'y', o None si no se encuentra coordenada.
    """
    if direccion is None:
        return None
    resultado = normalizar_direccion(direccion)
    direcciones_normalizadas = resultado.get('direccionesNormalizadas', [{}])
    if direcciones_normalizadas:
        coordenadas_normalizadas = direcciones_normalizadas[0].get('coordenadas', None)
    else:
        coordenadas_normalizadas = None
    return coordenadas_normalizadas

def aplicarCoordenadas(data:pd.DataFrame, columna_direccion:str):
    """Aplica la función de normalización y extrae coordenadas para un dataframe.

    Args:
        data (pd.DataFrame): DataFrame que contiene las direcciones.
        columna_direccion (str): Nombre de la columna con las direcciones.
        normalizar_func (function): Función que toma una dirección y devuelve un diccionario con coordenadas.

    Returns:
        pd.DataFrame: DataFrame con columnas adicionales para las coordenadas.
    """
    new_data = data.copy(deep=True)

    # Obtener coordenadas de las direcciones
    new_data['coordenadas'] = new_data[columna_direccion].apply(lambda x: obtenerCoordenadasNormalizador(x))

    # Extraer coordenadas en columnas separadas
    new_data['X'] = new_data['coordenadas'].apply(lambda x: x.get('x') if x is not None else None)
    new_data['Y'] = new_data['coordenadas'].apply(lambda x: x.get('y') if x is not None else None)

    # Limpiar la columna temporal de coordenadas
    new_data.drop(columns=['coordenadas'], inplace=True)

    return new_data
